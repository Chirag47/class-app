{"version":3,"sources":["reducers/index.js","components/MainPanel/StudentBadge/StudentBadge.js","components/MainPanel/MainPanel.js","actions/index.js","containers/Main.js","components/SidePanel/SidePanel.js","containers/Aside.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","selectedClass","state","arguments","length","undefined","action","type","text","showAverage","value","classes","concat","Object","toConsumableArray","Mark","props","react_default","a","createElement","es5","Row","Col","span","subjectName","percentage","subjectScore","Badge","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","studentAggregate","bind","assertThisInitialized","total","subject","student","marks","numberOfSubjects","keys","Number","parseFloat","toFixed","className","header","name","map","key","React","Component","MainPanelHeader","classObject","classname","students","onClick","clickHandler","gutter","style","display","offset","classAverage","MainPanel","_ref","toggleAvgButton","Fragment","StudentBadge_Badge","actionId","getClass","filter","item","getClassAverage","forEach","studentTotal","getShowAverage","connect","dispatch","id","SelectClass","handleClick","SidePanel","setSelectedClass","MyLayout","Aside","Main","App","window","store","data","Layout_MyLayout","Boolean","location","hostname","match","createStore","reducer","ReactDOM","render","es","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa534f8b.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\r\n\r\nconst selectedClass = (state = \"\", action) => {\r\n  if (action.type === \"SET_CLASS_SELECTION\") {\r\n    return action.text;\r\n  }\r\n  return state;\r\n};\r\nconst classes = (state = [], action) => {\r\n  if (action.type === \"SET_CLASSES\") {\r\n    return [...state, ...action.classes];\r\n  }\r\n  return state;\r\n};\r\n\r\nconst showAverage = (state = true, action) => {\r\n  if (action.type === \"TOGGLE_AVG_BUTTON\") {\r\n    return !action.value;\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default combineReducers({\r\n  selectedClass,\r\n  showAverage,\r\n  classes\r\n});\r\n","import React from \"react\";\r\nimport { Layout, Card, Progress } from \"element-react\";\r\nimport \"./StudentBadge.css\";\r\nimport PropTypes from \"prop-types\";\r\nfunction Mark(props) {\r\n  return (\r\n    <Layout.Row>\r\n      <Layout.Col span=\"8\">{props.subjectName}</Layout.Col>\r\n      <Layout.Col span=\"16\">\r\n        <Progress percentage={props.subjectScore} />\r\n      </Layout.Col>\r\n    </Layout.Row>\r\n  );\r\n}\r\n\r\nMark.propTypes = {\r\n  subjectName: PropTypes.string.isRequired,\r\n  subjectScore: PropTypes.number.isRequired\r\n};\r\n\r\nexport default class Badge extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.studentAggregate = this.studentAggregate.bind(this);\r\n  }\r\n  studentAggregate() {\r\n    let total = 0;\r\n    for (let subject in this.props.student.marks) {\r\n      total += this.props.student.marks[subject];\r\n    }\r\n    let numberOfSubjects = Object.keys(this.props.student.marks).length;\r\n    return Number.parseFloat(total / numberOfSubjects).toFixed(2);\r\n  }\r\n  render() {\r\n    return (\r\n      <Card\r\n        className=\"box-card\"\r\n        header={\r\n          <div className=\"boxHeader\">\r\n            <span>{this.props.student.name}</span>\r\n            <span className=\"percentage\">{this.studentAggregate()}%</span>\r\n          </div>\r\n        }\r\n      >\r\n        {Object.keys(this.props.student.marks) &&\r\n          Object.keys(this.props.student.marks).map(function(subject) {\r\n            return (\r\n              <Mark\r\n                key={subject}\r\n                subjectName={subject}\r\n                subjectScore={this.props.student.marks[subject]}\r\n              />\r\n            );\r\n          }, this)}\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nBadge.propTypes = {\r\n  student: PropTypes.exact({\r\n    name: PropTypes.string.isRequired,\r\n    marks: PropTypes.exact({\r\n      English: PropTypes.number.isRequired,\r\n      Science: PropTypes.number.isRequired,\r\n      Maths: PropTypes.number.isRequired\r\n    })\r\n  })\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Layout, Button } from \"element-react\";\r\nimport \"./MainPanel.css\";\r\nimport Badge from \"./StudentBadge/StudentBadge\";\r\n\r\nfunction MainPanelHeader(props) {\r\n  return (\r\n    <div className=\"headingContainer\">\r\n      <Layout.Row className=\"headingRow\">\r\n        <div className=\"classDetailColumn\">\r\n          <h2>{props.classObject.classname}</h2>\r\n          <h6>{props.classObject.students.length} Students</h6>\r\n        </div>\r\n        <div className=\"buttonColumn\">\r\n          <Button\r\n            className=\"button\"\r\n            type={props.showAverage ? \"default\" : \"primary\"}\r\n          >\r\n            <div onClick={() => props.clickHandler(props.showAverage)}>\r\n              {props.showAverage ? \"Show Average\" : \"Hide Average\"}\r\n            </div>\r\n          </Button>\r\n        </div>\r\n      </Layout.Row>\r\n      <Layout.Row\r\n        gutter=\"20\"\r\n        style={\r\n          props.showAverage === false\r\n            ? { display: \"block\" }\r\n            : { display: \"none\" }\r\n        }\r\n      >\r\n        <Layout.Col span=\"18\" offset=\"3\" className=\"averageDetails\">\r\n          Classroom Average Performance: {props.classAverage}%\r\n        </Layout.Col>\r\n      </Layout.Row>\r\n    </div>\r\n  );\r\n}\r\nMainPanelHeader.propTypes = {\r\n  classAverage: PropTypes.string.isRequired,\r\n  showAverage: PropTypes.bool.isRequired,\r\n  clickHandler: PropTypes.func.isRequired,\r\n  classObject: PropTypes.exact({\r\n    classname: PropTypes.string.isRequired,\r\n    students: PropTypes.arrayOf(\r\n      PropTypes.exact({\r\n        name: PropTypes.string.isRequired,\r\n        marks: PropTypes.exact({\r\n          English: PropTypes.number.isRequired,\r\n          Science: PropTypes.number.isRequired,\r\n          Maths: PropTypes.number.isRequired\r\n        })\r\n      })\r\n    )\r\n  })\r\n};\r\nconst MainPanel = ({\r\n  classObject,\r\n  classAverage,\r\n  showAverage,\r\n  toggleAvgButton\r\n}) => {\r\n  return (\r\n    <Layout.Col span=\"20\" className=\"mainPanel\">\r\n      {classObject && (\r\n        <React.Fragment>\r\n          <MainPanelHeader\r\n            classObject={classObject}\r\n            classAverage={classAverage}\r\n            clickHandler={toggleAvgButton}\r\n            showAverage={showAverage}\r\n          />\r\n          <div className=\"badgeList\">\r\n            {classObject.students &&\r\n              classObject.students.map(function(student) {\r\n                return <Badge student={student} key={student.name} />;\r\n              })}\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n      {!classObject && (\r\n        <div className=\"empty\">\r\n          <span>Select a Class</span>\r\n        </div>\r\n      )}\r\n    </Layout.Col>\r\n  );\r\n};\r\n\r\nexport default MainPanel;\r\n","let actionId = 0;\r\nexport function setSelectedClass(text) {\r\n  return {\r\n    type: \"SET_CLASS_SELECTION\",\r\n    id: actionId++,\r\n    text\r\n  };\r\n}\r\n\r\nexport function setClasses(classes) {\r\n  return {\r\n    type: \"SET_CLASSES\",\r\n    id: actionId++,\r\n    classes\r\n  };\r\n}\r\n\r\nexport function toggleAvgButton(value) {\r\n  return {\r\n    type: \"TOGGLE_AVG_BUTTON\",\r\n    id: actionId++,\r\n    value\r\n  };\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport MainPanel from \"../components/MainPanel/MainPanel\";\r\nimport { toggleAvgButton } from \"../actions/index\";\r\n\r\nconst getClass = (classes, classname) => {\r\n  return classes.filter(item => item.classname === classname)[0];\r\n};\r\n\r\nconst getClassAverage = (classes, classname) => {\r\n  const classObject = getClass(classes, classname);\r\n  let total = 0;\r\n  if (classObject) {\r\n    let students = classObject.students;\r\n    students.forEach(student => {\r\n      let studentTotal = 0;\r\n      for (let key in student.marks) {\r\n        studentTotal += student.marks[key];\r\n      }\r\n      studentTotal = studentTotal / Object.keys(student.marks).length;\r\n      total += studentTotal;\r\n    });\r\n    return Number.parseFloat(total / classObject.students.length).toFixed(2);\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst getShowAverage = state => {\r\n  return state.showAverage;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  classObject: getClass(state.classes, state.selectedClass),\r\n  classAverage: getClassAverage(state.classes, state.selectedClass),\r\n  showAverage: getShowAverage(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleAvgButton: value => dispatch(toggleAvgButton(value))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MainPanel);\r\n","import React from \"react\";\r\nimport \"./SidePanel.css\";\r\nimport { Layout } from \"element-react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction SelectClass(props) {\r\n  return (\r\n    <div>\r\n      {props.classes &&\r\n        props.classes.map(function(item) {\r\n          return (\r\n            <Layout.Row key={item}>\r\n              <Layout.Col offset=\"1\">\r\n                <div\r\n                  className={\r\n                    props.selectedClass === item ? \"name active\" : \"name\"\r\n                  }\r\n                  onClick={props.handleClick.bind(null, item)}\r\n                >\r\n                  {item}\r\n                </div>\r\n              </Layout.Col>\r\n            </Layout.Row>\r\n          );\r\n        }, this)}\r\n    </div>\r\n  );\r\n}\r\n\r\nSelectClass.propTypes = {\r\n  classes: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  handleClick: PropTypes.func.isRequired,\r\n  selectedClass: PropTypes.string.isRequired\r\n};\r\n\r\nconst SidePanel = ({ classes, selectedClass, setSelectedClass }) => {\r\n  return (\r\n    <Layout.Col span=\"4\" className=\"sidePanel\">\r\n      <Layout.Row className=\"heading\">\r\n        <h3> School: XYZ </h3>\r\n      </Layout.Row>\r\n      <SelectClass\r\n        classes={classes}\r\n        selectedClass={selectedClass}\r\n        handleClick={setSelectedClass}\r\n      />\r\n    </Layout.Col>\r\n  );\r\n};\r\nexport default SidePanel;\r\n","import { connect } from \"react-redux\";\r\nimport SidePanel from \"../components/SidePanel/SidePanel\";\r\nimport { setSelectedClass } from \"../actions/index\";\r\n\r\nconst getClassNames = classes => {\r\n  return classes.map(item => {\r\n    return item.classname;\r\n  });\r\n};\r\nconst mapStateToProps = state => ({\r\n  classes: getClassNames(state.classes),\r\n  selectedClass: state.selectedClass\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setSelectedClass: classname => dispatch(setSelectedClass(classname))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SidePanel);\r\n","import React from \"react\";\r\n\r\nimport Main from \"../../containers/Main\";\r\nimport Aside from \"../../containers/Aside\";\r\nimport \"./Layout.css\";\r\nimport { Layout } from \"element-react\";\r\nexport default class MyLayout extends React.Component {\r\n  render() {\r\n    return (\r\n      <Layout.Row className=\"layout\">\r\n        <Aside />\r\n        <Main />\r\n      </Layout.Row>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport MyLayout from \"./components/Layout/Layout\";\r\nimport data from \"./classroom_data.json\";\r\nimport { setClasses } from \"./actions/index\";\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    window.store.dispatch(setClasses(data));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MyLayout />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport reducer from \"./reducers\";\r\nimport \"./index.css\";\r\nimport \"element-theme-default\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst store = createStore(reducer);\r\nwindow.store = store;\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}